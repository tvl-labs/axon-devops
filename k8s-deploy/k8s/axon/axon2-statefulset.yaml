apiVersion: v1
kind: Service
metadata:
  labels:
    app: axon-2
  name: axon-2
  namespace: axon
spec:
  ports:
    - name: p2p
      port: 8001
      targetPort: 8001
      protocol: TCP
    - name: rpc
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: websocket
      port: 8010
      targetPort: 8010
      protocol: TCP
    - name: prometheus
      port: 8100
      targetPort: 8100
      protocol: TCP
  selector:
    app: axon-2
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: axon-2
  namespace: axon
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      svc: axon-test
      app: axon-2
      logging: "true"
  serviceName: "axon-2"
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        svc: axon-test
        app: axon-1
        logging: "true"
    spec:
      serviceAccountName: axon-node
      containers:
        - name: axon-2
          command: ["/bin/sh", "-c"]
          args:
            - |
              ./axon init --config /app/devtools/chain/k8s/node_2.toml --chain-spec /app/devtools/chain/k8s/chain-spec.toml  \
                && sleep 5  && ./axon run --config /app/devtools/chain/k8s/node_2.toml
          image: axonweb3/axon:amd64-v0.3.1-beta
          # env:
          #   - name: NODE_PRIVATE_KEY_1
          #     valueFrom:
          #       secretKeyRef:
          #         name: khalani-testnet-nodes-private-keys
          #         key: NODE_PRIVATE_KEY_1
          volumeMounts:
            - name: config-node2
              mountPath: /app/devtools/chain/k8s/node_1.toml
              subPath: node_1.toml
            - name: config-chainspec
              mountPath: /app/devtools/chain/k8s/chain-spec.toml
              subPath: chain-spec.toml
            - name: config-genesis
              mountPath: /app/devtools/chain/genesis.json
              subPath: genesis.json
            - name: config-db-options
              mountPath: /app/devtools/chain/k8s/default.db-options
              subPath: default.db-options
            - name: config-node-key 
              mountPath: /app/devtools/chain/k8s/net_1.key
              subPath: net_1.key
            - name: config-bls-key 
              mountPath: /app/devtools/chain/k8s/bls_1.key
              subPath: bls_1.key
            - name: data1
              mountPath: /app/devtools/chain/data2
              subPath: data2
            # - name: secrets-store-inline # The volume mount is required for the Sync With Kubernetes Secrets
            #   mountPath: "/mnt/secrets-store"
            #   readOnly: true
          ports:
            - name: p2p
              containerPort: 8001
            - name: rpc
              containerPort: 8000
            - name: websocket
              containerPort: 8010
            - name: prometheus
              containerPort: 8100
        - name: jaeger-agent-new
          image: jaegertracing/jaeger-agent:1.32
          env:
            - name: JACGER_COLLECTOR_ADDRESS
              value: jaeger-collector:14250
            - name: JACGER_AGENT_PORT
              value: "6831"
          args: ["--reporter.grpc.host-port=$(JACGER_COLLECTOR_ADDRESS)"]
          resources: {}
          securityContext:
            privileged: true
      imagePullSecrets:
        - name: dockerconfigjson-github-com
      volumes:
        - name: config-node2
          configMap:
            name: node2-toml
        - name: config-chainspec
          configMap:
            name: chainspec
        - name: config-genesis
          configMap:
            name: genesis
        - name: config-db-options
          configMap:
            name: db-options
        - name: config-node-key
          configMap:
            name: net_1_key
        - name: config-bls-key
          configMap:
            name: bls_1_key
        # - name: secrets-store-inline
          # csi:
          #   driver: secrets-store.csi.k8s.io
          #   readOnly: true
          #   volumeAttributes:
          #     secretProviderClass: "khalani-testnet-nodes-secret-class"
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: data2
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp2
        resources:
          requests:
            storage: 100Gi
